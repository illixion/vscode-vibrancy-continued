name: Build Native Modules

on:
  push:
    branches:
      - main
      - gh-actions-testing
#   pull_request:
#     branches:
#       - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2025, windows-11-arm]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Install node-gyp
        run: |
          npm install -g node-gyp

      - name: Rename binding.gyp.dist to binding.gyp
        run: mv binding.gyp.dist binding.gyp
        shell: bash

      - name: Clear prebuilt directory
        shell: bash
        run: |
          rm -rf native/prebuilt
          mkdir -p native/prebuilt

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm install

      - name: Save node_modules cache
        if: always()
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: Rename .node files with architecture suffix
        run: |
          ARCH_SUFFIX="${{ matrix.os }}"
          if [[ "$ARCH_SUFFIX" == "windows-11-arm" ]]; then
            ARCH_SUFFIX="arm64"
          else
            ARCH_SUFFIX="x64"
          fi
          for f in build/Release/*.node; do
            base=$(basename "$f" .node)
            mv "$f" "native/prebuilt/${base}-${ARCH_SUFFIX}.node"
          done
        shell: bash

      - name: Archive build output
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: build-output-${{ matrix.os }}-20.x
          path: |
            native/prebuilt/

      # Perform UI tests on Windows 2025 only, Win11 has an OOBE running
      - name: Install VSCode from zip (x64 or ARM64)
        if: matrix.os == 'windows-2025'
        shell: pwsh
        run: |
          $arch = "${{ matrix.os }}"
          if ($arch -eq "windows-11-arm") {
            $vscodeUrl = "https://code.visualstudio.com/sha/download?build=stable&os=win32-arm64-archive"
          } else {
            $vscodeUrl = "https://code.visualstudio.com/sha/download?build=stable&os=win32-x64-archive"
          }

          $vscodeZip = "$env:USERPROFILE\vscode.zip"
          $vscodeDir = "$env:USERPROFILE\vscode-portable"

          Invoke-WebRequest -Uri $vscodeUrl -OutFile $vscodeZip
          Expand-Archive -Path $vscodeZip -DestinationPath $vscodeDir -Force

          # Add to PATH for this session
          echo "$vscodeDir" | Out-File -FilePath $env:GITHUB_PATH -Append

      - name: Package extension
        if: matrix.os == 'windows-2025'
        run: npx @vscode/vsce package
        
      - name: Install VSIX on VSCode
        if: matrix.os == 'windows-2025'
        shell: pwsh
        run: |
          $vsix = Get-ChildItem *.vsix | Select-Object -First 1
          $vscodePath = "$env:USERPROFILE\vscode-portable\Code.exe"
          $vscodeCliPath = "$env:USERPROFILE\vscode-portable\bin\code"

          Start-Process $vscodeCliPath -ArgumentList "--install-extension $($vsix.FullName) --force"
          Start-Sleep -Seconds 3

          $env:VIBRANCY_AUTO_INSTALL = "true"

          Start-Process $vscodePath
          Start-Sleep -Seconds 10

          $proc = Get-Process | Where-Object { $_.Path -eq $vscodePath -or $_.ProcessName -like "Code*" }
          if ($null -ne $proc) {
            Write-Host "Killing VSCode process: $($proc.Id)"
            $proc | Stop-Process -Force
          }

          $env:VIBRANCY_AUTO_INSTALL = $null

          # Adjust system settings
          Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize" -Name EnableTransparency -Value 1

          # Open color bars
          Start-Process powershell.exe -ArgumentList "-NoProfile -ExecutionPolicy Bypass -File `"$PWD\.github\scripts\color-bars.ps1`""

          # Launch VSCode
          Start-Process $vscodePath -ArgumentList "extension/index.js"
          Start-Sleep -Seconds 10

      - name: Take screenshot of VSCode
        if: matrix.os == 'windows-2025'
        shell: pwsh
        run: |
          $screenshotPath = "screenshot-${{ matrix.os }}.png"
          Add-Type -AssemblyName System.Windows.Forms
          Add-Type -AssemblyName System.Drawing
          $bounds = [System.Windows.Forms.Screen]::PrimaryScreen.Bounds
          $bitmap = New-Object System.Drawing.Bitmap $bounds.Width, $bounds.Height
          $graphics = [System.Drawing.Graphics]::FromImage($bitmap)
          $graphics.CopyFromScreen($bounds.Location, [System.Drawing.Point]::Empty, $bounds.Size)
          $bitmap.Save($screenshotPath, [System.Drawing.Imaging.ImageFormat]::Png)
          Write-Host "Screenshot saved to: $screenshotPath"

      - name: Upload screenshot as artifact
        if: matrix.os == 'windows-2025'
        uses: actions/upload-artifact@v4
        with:
          name: vscode-screenshot-${{ matrix.os }}-20.x
          path: |
            screenshot-${{ matrix.os }}.png

  merge-and-package-vsix:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Install dependencies
        run: npm install --omit=dev

      - name: Clear prebuilt directory
        shell: bash
        run: |
          rm -rf native/prebuilt
          mkdir -p native/prebuilt

      - name: Download all build-output artifacts
        uses: actions/download-artifact@v4
        with:
          path: combined-prebuilt
          pattern: build-output-*

      - name: List downloaded files
        run: ls -R combined-prebuilt

      - name: Combine all .node files into native/prebuilt
        run: |
          mkdir -p native/prebuilt
          find combined-prebuilt -name '*.node' -exec cp {} native/prebuilt/ \;

      - name: Remove temp combined-prebuilt directory
        run: rm -rf combined-prebuilt

      - name: Package extension
        run: npx @vscode/vsce package

      - name: Upload VSIX package as artifact
        uses: actions/upload-artifact@v4
        with:
          name: vscode-vibrancy-continued-${{ github.sha }}
          path: "*.vsix"

